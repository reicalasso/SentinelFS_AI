services:
  # ============================================================================
  # Core Application
  # ============================================================================
  sentinelzer0:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sentinelzer0-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=info
      - MODEL_PATH=/models/production
      - DATA_PATH=/data
      - PROMETHEUS_PORT=9090
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./models:/models:ro
      - ./data:/data
      - ./logs:/logs
      - model-cache:/app/checkpoints
    depends_on:
      - redis
      - prometheus
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # Redis Cache
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: sentinelzer0-redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Changed to 6380 to avoid conflict
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================================================
  # Prometheus Monitoring
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sentinelzer0-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Grafana Dashboards
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: sentinelzer0-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=sentinelzer0
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MLflow Tracking Server
  # ============================================================================
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: sentinelzer0-mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow/mlflow.db
      --default-artifact-root /mlflow/artifacts
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Elasticsearch (Optional - for log aggregation)
  # ============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sentinelzer0-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - with-elk

  # ============================================================================
  # Kibana (Optional - for log visualization)
  # ============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sentinelzer0-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sentinelzer0-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - with-elk

# ============================================================================
# Networks
# ============================================================================
networks:
  sentinelzer0-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  model-cache:
  redis-data:
  prometheus-data:
  grafana-data:
  mlflow-data:
  elasticsearch-data:
